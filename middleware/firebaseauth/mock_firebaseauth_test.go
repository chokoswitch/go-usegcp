// Code generated by mockery v2.43.0. DO NOT EDIT.

package firebaseauth

import (
	context "context"

	auth "firebase.google.com/go/v4/auth"
	mock "github.com/stretchr/testify/mock"
)

// MockfirebaseAuth is an autogenerated mock type for the firebaseAuth type
type MockfirebaseAuth struct {
	mock.Mock
}

type MockfirebaseAuth_Expecter struct {
	mock *mock.Mock
}

func (_m *MockfirebaseAuth) EXPECT() *MockfirebaseAuth_Expecter {
	return &MockfirebaseAuth_Expecter{mock: &_m.Mock}
}

// VerifyIDToken provides a mock function with given fields: ctx, idToken
func (_m *MockfirebaseAuth) VerifyIDToken(ctx context.Context, idToken string) (*auth.Token, error) {
	ret := _m.Called(ctx, idToken)

	if len(ret) == 0 {
		panic("no return value specified for VerifyIDToken")
	}

	var r0 *auth.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*auth.Token, error)); ok {
		return rf(ctx, idToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *auth.Token); ok {
		r0 = rf(ctx, idToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, idToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockfirebaseAuth_VerifyIDToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyIDToken'
type MockfirebaseAuth_VerifyIDToken_Call struct {
	*mock.Call
}

// VerifyIDToken is a helper method to define mock.On call
//   - ctx context.Context
//   - idToken string
func (_e *MockfirebaseAuth_Expecter) VerifyIDToken(ctx interface{}, idToken interface{}) *MockfirebaseAuth_VerifyIDToken_Call {
	return &MockfirebaseAuth_VerifyIDToken_Call{Call: _e.mock.On("VerifyIDToken", ctx, idToken)}
}

func (_c *MockfirebaseAuth_VerifyIDToken_Call) Run(run func(ctx context.Context, idToken string)) *MockfirebaseAuth_VerifyIDToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockfirebaseAuth_VerifyIDToken_Call) Return(_a0 *auth.Token, _a1 error) *MockfirebaseAuth_VerifyIDToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockfirebaseAuth_VerifyIDToken_Call) RunAndReturn(run func(context.Context, string) (*auth.Token, error)) *MockfirebaseAuth_VerifyIDToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockfirebaseAuth creates a new instance of MockfirebaseAuth. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockfirebaseAuth(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockfirebaseAuth {
	mock := &MockfirebaseAuth{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
